#BUILD files=/(build\.gradle|gradlew)/
---
name: Doozer-Gradle

true:
  workflow_dispatch:
    inputs:
      pipeline:
        required: true
      ref:
        required: true
      runner:
        required: false
      env:
        required: false

jobs:
  build:
    runs-on: "${{ inputs.runner || 'ubuntu-24.04' }}"

    steps:

    - uses: actions/checkout@v4
      with:
        ref: "${{ inputs.ref }}"

    - name: Import env
      env:
        env_json: "${{ inputs.env_json }}"
      run: |
        set -euo pipefail
        echo "$env_json" | jq -r ''to_entries[]|"\(.key)=\(.value)"'' >> "$GITHUB_ENV"

    - name: Pre-build hooks
      working-directory: "${{ inputs.pipeline }}"
      run: |
        set -euo pipefail
        find "$HARBOUR"/hooks/10-pre-build.d hooks/10-pre-build.d -type f -perm -u+x -execdir sh -c '"$0"' {} \; 2>/dev/null || true

    - name: Gradle assemble
      run: |
        set -euo pipefail
        pushd "${{ inputs.pipeline }}" >/dev/null
        chmod +x ./gradlew || true
        if [[ -x ./gradlew ]]; then ./gradlew assemble --no-daemon; else gradle assemble --no-daemon; fi
        popd >/devnull

    - name: Gradle test
      if: env.BUILD_TEST_SKIP != 'true'
      run: |
        set -euo pipefail
        pushd "${{ inputs.pipeline }}" >/dev/null
        if [[ -x ./gradlew ]]; then ./gradlew test --no-daemon; else gradle test --no-daemon; fi
        popd >/dev/null

    - name: Post-build hooks
      working-directory: "${{ inputs.pipeline }}"
      run: |
        set -euo pipefail
        find "$HARBOUR"/hooks/20-post-build.d hooks/20-post-build.d -type f -perm -u+x -execdir sh -c '"$0"' {} \; 2>/dev/null || true

    - name: Prepare payload
      run: |
        set -euo pipefail
        env_json=$(awk -F= '/=/{print $1}' "$GITHUB_ENV" | jq -Rn '[inputs] as $k | reduce $k[] as $x ({}; . + {($x): env[$x]})')
        sed -i '/^env_json=/d' "$GITHUB_ENV"
        echo "env_json=$env_json" >> "$GITHUB_ENV"

    - name: Harbour Master Dispatch
      uses: "./.github/workflows/harbour-master.hm.yml"
      with:
        pipeline: "${{ inputs.pipeline }}"
        ref: "${{ inputs.ref }}"
        env_json: "${{ env.env_json }}"