#HM trigger=".csproj|global.json|NuGet.config"
name: Builder-DotNet
on:
  workflow_dispatch:
    inputs:
      pipeline:
        required: true
      ref:
        required: true
      runner:
        required: false
      env:
        required: false
jobs:
  build:
    runs-on: ${{ inputs.runner || 'ubuntu-24.04' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Import env
        run: |
          echo '${{ inputs.env }}' | jq -r 'to_entries[]|"\(.key)=\(.value)"' >> "$GITHUB_ENV"
      - name: dotnet restore
        run: |
          set -euo pipefail
          pushd "${{ inputs.pipeline }}" >/dev/null
          dotnet restore
          popd >/dev/null
      - name: dotnet build
        run: |
          set -euo pipefail
          pushd "${{ inputs.pipeline }}" >/dev/null
          dotnet build -c Release
          popd >/dev/null
      - name: dotnet test
        run: |
          set -euo pipefail
          pushd "${{ inputs.pipeline }}" >/dev/null
          dotnet test -c Release --no-build || true
          popd >/dev/null
      - name: Post-build hooks
        run: |
          set -euo pipefail
          for dir in ".github/hooks/post-build.d" "${{ inputs.pipeline }}/hooks/post-build.d"; do
            if [[ -d "$dir" ]]; then
              for f in "$dir"/*; do
                [[ -f "$f" && -x "$f" ]] || continue
                "$f"
              done
            fi
          done
      - name: Prepare payload
        run: |
          set -euo pipefail
          env_json=$(awk -F= '/=/{print $1}' "$GITHUB_ENV" | jq -Rn '[inputs] as $k | reduce $k[] as $x ({}; . + {($x): env[$x]})')
          sed -i '/^env_json=/d' "$GITHUB_ENV"
          echo "env_json=$env_json" >> "$GITHUB_ENV"
